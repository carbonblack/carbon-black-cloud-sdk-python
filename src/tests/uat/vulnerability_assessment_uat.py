#!/usr/bin/env python
# *******************************************************
# Copyright (c) VMware, Inc. 2021-2022. All Rights Reserved.
# SPDX-License-Identifier: MIT
# *******************************************************
# *
# * DISCLAIMER. THIS PROGRAM IS PROVIDED TO YOU "AS IS" WITHOUT
# * WARRANTIES OR CONDITIONS OF ANY KIND, WHETHER ORAL OR WRITTEN,
# * EXPRESS OR IMPLIED. THE AUTHOR SPECIFICALLY DISCLAIMS ANY IMPLIED
# * WARRANTIES OR CONDITIONS OF MERCHANTABILITY, SATISFACTORY QUALITY,
# * NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE.

"""
The following API calls are tested in this script.

For the validation CBC API requests are used.

To execute, a profile must be provided using the standard CBC Credentials.

Processes:
- Get a Vulnerability Summary at the organization level - with/without severity
- Retrieve a device list with a Vulnerability Summary.
- Get Vulnerability List for Specific OS and Application

- Get an Operating System or Application Vulnerability Summary for a specific device.
- Get an Operating System or Application Vulnerability List for a specific device.
- Perform an action on a specific device.

- Get a list of assets affected by a specific vulnerability CVE ID.
- Get vulnerability details for a specific CVE ID.

"""

# Standard library imports
import sys
import requests

# Internal library imports
from cbc_sdk.helpers import build_cli_parser, get_cb_cloud_object
from cbc_sdk.platform import Device, Vulnerability
from cbc_sdk.errors import MoreThanOneResultError


HEADERS = {'X-Auth-Token': '', 'Content-Type': 'application/json'}
ORG_KEY = ''
HOSTNAME = ''
# Formatters
NEWLINES = 1
DELIMITER = '-'
SYMBOLS = 70

# URLS
# Organizational Level
GET_VULN_SUMMARY_ORG = '{}vulnerability/assessment/api/v1/orgs/{}/vulnerabilities/summary'
GET_VULN_SUMMARY_SEARCH = '{}vulnerability/assessment/api/v1/orgs/{}' \
                          '/devices/vulnerabilities/summary/_search?dataForExport=true'
GET_VULN_SEARCH = '{}vulnerability/assessment/api/v1/orgs/{}/devices/vulnerabilities/_search?dataForExport=true'

# Device Vulnerability Level
GET_DEVICE_VULN_SUMMARY = '{}vulnerability/assessment/api/v1/orgs/{}/devices/{}/vulnerabilities/summary'
GET_DEVICE_VULN_LIST = '{}vulnerability/assessment/api/v1/orgs/{}/devices/{}/vulnerabilities/_search?dataForExport=true'
DEVICE_PERFORM_ACTION = '{}vulnerability/assessment/api/v1/orgs/{}/devices/{}/device_actions'

# Vulnerability level
GET_VULNERABILITY = '{}vulnerability/assessment/api/v1/orgs/{}/devices/vulnerabilities/_search?dataForExport=true'
GET_AFFECTED_DEVICES = '{}vulnerability/assessment/api/v1/orgs/{}/vulnerabilities/{}/devices'

# Vulnerability Level
"""
    API Helper Requests:
    - GET /vulnerability/assessment/api/v1/orgs/{org_key}/vulnerabilities/summary
    - POST /vulnerability/assessment/api/v1/orgs/{org_key}/devices/vulnerabilities/summary/_search
    - POST /vulnerability/assessment/api/v1/orgs/{org_key}/devices/vulnerabilities/_search

    - GET /vulnerability/assessment/api/v1/orgs/{org_key}/devices/{device_id}/vulnerabilities/summary
    - POST /vulnerability/assessment/api/v1/orgs/{org_key}/devices/{device_id}/vulnerabilities/_search
    - POST <cbc-hostname>/vulnerability/assessment/api/v1/orgs/{org_key}/devices/{device_id}/device_actions

    - POST /vulnerability/assessment/api/v1/orgs/{org_key}/vulnerabilities/{cveId}/devices
    - GET /vulnerability/assessment/api/v1/vulnerabilities/{cveId}
"""

""" Organization Level """


def get_vulnerability_summary(severity=None):
    """Getting the result from the CBC API"""
    url = GET_VULN_SUMMARY_ORG.format(HOSTNAME, ORG_KEY)
    if severity:
        url += '?severity=' + severity
    return requests.get(url, headers=HEADERS).json()


def search_vulnerability_summary(data={}):
    """Retrieve a device list with a Vulnerability Summary."""
    url = GET_VULN_SUMMARY_SEARCH.format(HOSTNAME, ORG_KEY)
    return requests.post(url, json=data, headers=HEADERS).json()


def search_vulnerabilities(data={}):
    """Get Vulnerability List for Specific OS and Application"""
    url = GET_VULN_SEARCH.format(HOSTNAME, ORG_KEY)
    results = []
    for vuln in requests.post(url, json=data, headers=HEADERS).json()["results"]:
        vuln["cve_id"] = vuln["vuln_info"]["cve_id"]
        results.append(vuln)
    return results


""" Device Level """


def get_specific_device_summary(device_id=None):
    """Get an Operating System or Application Vulnerability Summary for a specific device."""
    url = GET_DEVICE_VULN_SUMMARY.format(HOSTNAME, ORG_KEY, device_id)
    return requests.get(url, headers=HEADERS).json()


def get_specific_device_list(device_id=None, data={}):
    """Get an Operating System or Application Vulnerability List for a specific device."""
    url = GET_DEVICE_VULN_LIST.format(HOSTNAME, ORG_KEY, device_id)
    results = []
    for vuln in requests.post(url, json=data, headers=HEADERS).json()["results"]:
        vuln["cve_id"] = vuln["vuln_info"]["cve_id"]
        results.append(vuln)
    return results


def refresh_device(device_id=None, data={'action_type': 'REFRESH'}):
    """Perform an action on a specific device."""
    url = DEVICE_PERFORM_ACTION.format(HOSTNAME, ORG_KEY, device_id)
    return requests.post(url, json=data, headers=HEADERS).json()


""" Vulnerability level """


def get_vulnerability(cve_id=None):
    """Get vulnerability details for a specific CVE ID."""
    url = GET_VULNERABILITY.format(HOSTNAME, ORG_KEY)
    results = requests.post(url,
                            json={
                                "criteria": {
                                    "cve_id": {
                                        "value": cve_id,
                                        "operator": "EQUALS"
                                    }
                                }
                            },
                            headers=HEADERS).json()["results"]
    for vuln in results:
        vuln["cve_id"] = vuln["vuln_info"]["cve_id"]
    return results


def get_affected_devices(cve_id=None, data={}):
    """Get Affected Assets for Specific Vulnerability"""
    url = GET_AFFECTED_DEVICES.format(HOSTNAME, ORG_KEY, cve_id)
    return requests.post(url, json=data, headers=HEADERS).json()


def main():
    """Script entry point"""
    global ORG_KEY
    global HOSTNAME
    parser = build_cli_parser()
    args = parser.parse_args()
    print_detail = args.verbose

    if print_detail:
        print(f"profile being used is {args.__dict__}")

    cb = get_cb_cloud_object(args)
    HEADERS['X-Auth-Token'] = cb.credentials.token
    ORG_KEY = cb.credentials.org_key
    HOSTNAME = cb.credentials.url

    print()
    print(18 * ' ', 'Vulnerability Organization Level')
    print(SYMBOLS * DELIMITER)

    api_results = get_vulnerability_summary()
    sdk_results = cb.select(Vulnerability.OrgSummary).submit()
    assert api_results == sdk_results._info, 'Test Failed Expected: {} Actual: {}'.\
        format(api_results, sdk_results)
    print('Get Vulnerability Summary...........................................OK')
    api_results = get_vulnerability_summary(severity='LOW')
    sdk_results = cb.select(Vulnerability.OrgSummary).set_severity('LOW').submit()
    assert api_results == sdk_results._info, 'Test Failed Expected: {} Actual: {}'.\
        format(api_results, sdk_results)
    print('Get Vulnerability Summary with severity.............................OK')
    data = {
        "criteria": {
            "severity": {
                "value": "LOW",
                "operator": "EQUALS"
            },
            "os_type": {
                "value": "WINDOWS",
                "operator": "EQUALS"
            }
        }
    }
    api_results = search_vulnerability_summary(data)['results']
    query = cb.select(Vulnerability.AssetView).set_severity('LOW', 'EQUALS') \
                                              .set_os_type('WINDOWS', 'EQUALS')
    sdk_results = [asset for asset in query]
    assert api_results == sdk_results, 'Test Failed Expected: {} Actual: {}'.\
        format(api_results, sdk_results)
    print('Get Asset View with Vulnerability Summary...........................OK')

    data = {
        'criteria': {'severity': {'value': 'LOW', 'operator': 'EQUALS'}},
        'sort': [{'field': 'highest_risk_score', 'order': 'DESC'}],
        'rows': 5
    }
    api_results = search_vulnerabilities(data=data)
    query = cb.select(Vulnerability).set_severity('LOW', 'EQUALS').sort_by('highest_risk_score', 'DESC')
    sdk_results = [x._info for x in query[:5]]
    assert api_results == sdk_results, 'Test Failed Expected: {} Actual: {}'.\
        format(api_results, sdk_results)
    print('Get Vulnerability List for Specific OS and Application..............OK')

    print()
    print(22 * ' ', 'Device Vulnerability Level')
    print(SYMBOLS * DELIMITER)

    device = cb.select(Device).set_status(['ACTIVE']).first()
    DEVICE_ID = device.id

    api_results = get_specific_device_summary(device_id=DEVICE_ID)
    sdk_results = device.get_vulnerability_summary()
    assert api_results == sdk_results, 'Test Failed Expected: {} Actual: {}'.\
        format(api_results, sdk_results)
    print('Get Vulnerability Summary for a specific device.....................OK')

    query = device.get_vulnerabilties()
    api_results = get_specific_device_list(device_id=DEVICE_ID)
    sdk_results = [x._info for x in query]

    CVE_ID = sdk_results[0]["cve_id"]

    assert api_results == sdk_results, 'Test Failed Expected: {} Actual: {}'.\
        format(api_results, sdk_results)
    print('Get Vulnerabilities for a specific device...........................OK')

    device = cb.select(Device, DEVICE_ID)
    sdk_results = device.vulnerability_refresh()
    sdk_results.pop('updated_at')
    api_results = refresh_device(device_id=DEVICE_ID)
    api_results.pop('updated_at')
    assert api_results == sdk_results, 'Test Failed Expected: {} Actual: {}'.\
        format(api_results, sdk_results)
    print('Perform an action on a specific device..............................OK')

    print()
    print(25 * ' ', 'Vulnerability Level')
    print(SYMBOLS * DELIMITER)

    CVE_ID = 'CVE-2008-5915'

    api_results = get_vulnerability(cve_id=CVE_ID)
    vulnerability = None
    try:
        vulnerability = Vulnerability(cb, CVE_ID)
    except MoreThanOneResultError as ex:
        vulnerability = ex.results

    if type(vulnerability) == list:
        sdk_results = [vuln._info for vuln in vulnerability]

        # Select a singular vulnerabilty for follow up tests
        vulnerability = vulnerability[0]
    else:
        sdk_results = vulnerability._info

    assert api_results == sdk_results, 'Test Failed Expected: {} Actual: {}'.format(api_results, sdk_results)
    print('Get vulnerability details for a specific CVE ID.....................OK')

    api_response = get_affected_devices(cve_id=CVE_ID, data={'os_product_id': vulnerability.os_product_id})['results']
    query = vulnerability.get_affected_assets()
    sdk_results = []
    api_results = []
    for x in query:
        sdk_results.append({'device_id': x.id, 'type': x.deployment_type, 'name': x.vm_name, 'host_name': x.name})
    for x in api_response:
        api_results.append({'device_id': x['device_id'],
                            'type': x['type'],
                            'name': x['name'],
                            'host_name': x['host_name']})
    assert api_results == sdk_results, 'Test Failed Expected: {} Actual: {}'.\
        format(api_results, sdk_results)
    print('Get Affected Assets for Specific Vulnerability......................OK')


if __name__ == "__main__":
    try:
        sys.exit(main())
    except KeyboardInterrupt:
        print("\nInterrupted by user")
