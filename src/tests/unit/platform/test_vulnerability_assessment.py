#!/usr/bin/env python3

# *******************************************************
# Copyright (c) VMware, Inc. 2021-2022. All Rights Reserved.
# SPDX-License-Identifier: MIT
# *******************************************************
# *
# * DISCLAIMER. THIS PROGRAM IS PROVIDED TO YOU "AS IS" WITHOUT
# * WARRANTIES OR CONDITIONS OF ANY KIND, WHETHER ORAL OR WRITTEN,
# * EXPRESS OR IMPLIED. THE AUTHOR SPECIFICALLY DISCLAIMS ANY IMPLIED
# * WARRANTIES OR CONDITIONS OF MERCHANTABILITY, SATISFACTORY QUALITY,
# * NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE.

"""Unit test code for Vulnerability Assessment"""

import pytest
import logging
from cbc_sdk.rest_api import CBCloudAPI
from cbc_sdk.errors import ApiError, ObjectNotFoundError, MoreThanOneResultError
from tests.unit.fixtures.CBCSDKMock import CBCSDKMock
from cbc_sdk.platform import Device, Vulnerability
from tests.unit.fixtures.platform.mock_vulnerabilities import (GET_VULNERABILITY_SUMMARY_ORG_LEVEL,
                                                               GET_VULNERABILITY_SUMMARY_ORG_LEVEL_PER_SEVERITY,
                                                               GET_ASSET_VIEW_VUL_RESP,
                                                               GET_VULNERABILITY_RESP,
                                                               GET_AFFECTED_ASSETS_SPECIFIC_VULNERABILITY,
                                                               GET_VULNERABILITY_RESP_MULTIPLE,
                                                               GET_VULNERABILITY_RESP_MULTIPLE_SAME_CVE,
                                                               GET_DEVICE_VULNERABILITY_SUMMARY_RESP,
                                                               REFRESH_DEVICE_RESP,
                                                               MOCK_WORKLOAD_RESP)
from tests.unit.fixtures.platform.mock_devices import (GET_DEVICE_RESP, GET_DEVICE_RESP_NO_VCENTER)

logging.basicConfig(format='%(asctime)s %(levelname)s:%(message)s', level=logging.DEBUG, filename='log.txt')


@pytest.fixture(scope="function")
def cb():
    """Create CBCloudAPI singleton"""
    return CBCloudAPI(url="https://example.com",
                      org_key="test",
                      token="abcd/1234",
                      ssl_verify=False)


@pytest.fixture(scope="function")
def cbcsdk_mock(monkeypatch, cb):
    """Mocks CBC SDK for unit tests"""
    return CBCSDKMock(monkeypatch, cb)


# ==================================== UNIT TESTS BELOW ====================================
def test_get_vulnerability_summary(cbcsdk_mock):
    """Tests get organizational level vulnerability summary"""
    cbcsdk_mock.mock_request("GET", "/vulnerability/assessment/api/v1/orgs/test/vulnerabilities/summary",
                             GET_VULNERABILITY_SUMMARY_ORG_LEVEL)
    api = cbcsdk_mock.api
    vsummary = api.select(Vulnerability.OrgSummary).submit()

    assert vsummary.monitored_assets == 13
    assert vsummary.severity_summary.get('ALL', None)
    assert vsummary.severity_summary.get('MODERATE', None)
    assert vsummary.severity_summary.get('LOW', None)
    assert vsummary.severity_summary.get('IMPORTANT', None)
    assert vsummary.severity_summary.get('CRITICAL', None)

    assert vsummary.severity_levels() == ['ALL', 'MODERATE', 'LOW', 'IMPORTANT', 'CRITICAL']


def test_get_vulnerability_summary_per_severity(cbcsdk_mock):
    """Tests get organizational level vulnerability summary per severity"""
    cbcsdk_mock.mock_request("GET", "/vulnerability/assessment/api/v1/orgs/test/vulnerabilities/summary",
                             GET_VULNERABILITY_SUMMARY_ORG_LEVEL_PER_SEVERITY)
    api = cbcsdk_mock.api
    vsummary = api.select(Vulnerability.OrgSummary).set_severity('CRITICAL').submit()

    assert vsummary.monitored_assets == 13
    assert vsummary.severity_summary.get('ALL', None) is None
    assert vsummary.severity_summary.get('MODERATE', None) is None
    assert vsummary.severity_summary.get('LOW', None) is None
    assert vsummary.severity_summary.get('IMPORTANT', None) is None
    assert vsummary.severity_summary.get('CRITICAL', None)


def test_get_vulnerability_summary_per_severity_fail(cbcsdk_mock):
    """Tests get organizational level vulnerability summary per severity error - wrong severity"""
    cbcsdk_mock.mock_request("GET", "/vulnerability/assessment/api/v1/orgs/test/vulnerabilities/summary",
                             GET_VULNERABILITY_SUMMARY_ORG_LEVEL_PER_SEVERITY)
    api = cbcsdk_mock.api
    with pytest.raises(ApiError):
        api.select(Vulnerability.OrgSummary).set_severity('ERROR')


def test_get_vulnerability_summary_per_severity_per_vcenter(cbcsdk_mock):
    """Tests get organizational level vulnerability summary per severity"""
    cbcsdk_mock.mock_request("GET",
                             "/vulnerability/assessment/api/v1/orgs/test/vcenters/someid/vulnerabilities/summary",
                             GET_VULNERABILITY_SUMMARY_ORG_LEVEL_PER_SEVERITY)
    api = cbcsdk_mock.api
    vsummary = api.select(Vulnerability.OrgSummary).set_severity('CRITICAL').set_vcenter('someid').submit()

    assert vsummary.monitored_assets == 13
    assert vsummary.severity_summary.get('ALL', None) is None
    assert vsummary.severity_summary.get('MODERATE', None) is None
    assert vsummary.severity_summary.get('LOW', None) is None
    assert vsummary.severity_summary.get('IMPORTANT', None) is None
    assert vsummary.severity_summary.get('CRITICAL', None)

    assert vsummary.severity_levels() == ['CRITICAL']


def test_get_asset_view_with_vulnerability_summary(cbcsdk_mock):
    """Test Get Asset View with Vulnerability Summary"""
    cbcsdk_mock.mock_request("POST",
                             "/vulnerability/assessment/api/v1/orgs/test/devices/vulnerabilities/summary/_search",
                             GET_ASSET_VIEW_VUL_RESP)
    api = cbcsdk_mock.api
    query = api.select(Vulnerability.AssetView)

    assert len(query) == 2
    for asset in query:
        assert asset["name"] == "jdoe-windows_2012" or asset["name"] == "cwp-windows_2012_r2"


def test_get_asset_view_with_vulnerability_summary_and_vcenter_async(cbcsdk_mock):
    """Test Get Asset View with Vulnerability Summary"""
    cbcsdk_mock.mock_request("POST",
                             "/vulnerability/assessment/api/v1/orgs/test/vcenters/testvcenter/devices/vulnerabilities/summary/_search",  # noqa: E501
                             GET_ASSET_VIEW_VUL_RESP)
    api = cbcsdk_mock.api
    query_future = api.select(Vulnerability.AssetView).set_vcenter("testvcenter").execute_async()
    results = query_future.result()

    assert type(results) is Vulnerability.AssetView
    assert len(results) == 2
    assert results[0]["name"] == "jdoe-windows_2012"


def test_get_all_vulnerabilities(cbcsdk_mock):
    """Test Get Asset View with Vulnerability Summary"""
    cbcsdk_mock.mock_request("POST", "/vulnerability/assessment/api/v1/orgs/test/devices/vulnerabilities/_search",
                             GET_VULNERABILITY_RESP_MULTIPLE)
    api = cbcsdk_mock.api
    query = api.select(Vulnerability)
    results = [result for result in query._perform_query()]
    assert len(results) == 2
    assert query._count() == len(results)


def test_get_vulnerability_by_id(cbcsdk_mock):
    """Tests a get vulnerabilty by cve_id."""
    cbcsdk_mock.mock_request("POST", "/vulnerability/assessment/api/v1/orgs/test/devices/vulnerabilities/_search",
                             GET_VULNERABILITY_RESP)
    api = cbcsdk_mock.api
    vulnerability = Vulnerability(api, "CVE-2014-4650")
    assert vulnerability._model_unique_id == "CVE-2014-4650"

    vulnerability = api.select(Vulnerability, "CVE-2014-4650")
    assert vulnerability._model_unique_id == "CVE-2014-4650"


def test_get_vulnerability_by_id_multiple(cbcsdk_mock):
    """Tests a get vulnerabilty by cve_id where cve affects multiple OS/Products"""
    cbcsdk_mock.mock_request("POST", "/vulnerability/assessment/api/v1/orgs/test/devices/vulnerabilities/_search",
                             GET_VULNERABILITY_RESP_MULTIPLE_SAME_CVE)
    api = cbcsdk_mock.api
    vulnerability = Vulnerability(api, "CVE-2014-4650", os_product_id="89_1234")
    assert vulnerability._model_unique_id == "CVE-2014-4650"
    assert vulnerability.os_product_id == "89_1234"

    vulnerability = api.select(Vulnerability, "CVE-2014-4650", os_product_id="89_1234")
    assert vulnerability._model_unique_id == "CVE-2014-4650"
    assert vulnerability.os_product_id == "89_1234"


def test_get_vulnerability_not_found(cbcsdk_mock):
    """Test Get Asset View with Vulnerability Summary"""
    cbcsdk_mock.mock_request("POST", "/vulnerability/assessment/api/v1/orgs/test/devices/vulnerabilities/_search",
                             {"num_found": 0, "results": []})
    api = cbcsdk_mock.api
    with pytest.raises(ObjectNotFoundError) as ex:
        api.select(Vulnerability, "CVE-2014-4650")
    assert ex.value.message == "Vulnerability not found"


def test_get_vulnerability_more_than_one(cbcsdk_mock):
    """Test Get Asset View with Vulnerability Summary"""
    cbcsdk_mock.mock_request("POST", "/vulnerability/assessment/api/v1/orgs/test/devices/vulnerabilities/_search",
                             {
                                 "num_found": 2,
                                 "results": [
                                     {"id": 1, "os_product_id": "a_1"},
                                     {"id": 2, "os_product_id": "a_2"}
                                 ]
                             })
    api = cbcsdk_mock.api
    with pytest.raises(MoreThanOneResultError) as ex:
        api.select(Vulnerability, "CVE-2014-4650")
    assert ex.value.message == "CVE affects more than one OS or product, " \
                               "vulnerabilites available in exception.results"
    assert len(ex.value.results) == 2
    assert type(ex.value.results[0]) == Vulnerability


def test_get_vulnerability_per_vcenter(cbcsdk_mock):
    """Test Get Asset View with Vulnerability Summary"""
    cbcsdk_mock.mock_request("POST", "/vulnerability/assessment/api/v1/orgs/test/vcenters/testvcenter/devices/"
                             "vulnerabilities/_search", GET_VULNERABILITY_RESP_MULTIPLE)
    api = cbcsdk_mock.api
    query = api.select(Vulnerability).set_vcenter('testvcenter')
    results = [result for result in query._perform_query()]
    assert len(results) == 2
    assert query._count() == len(results)
    vuln = results[0]
    assert vuln.os_product_id == "90_5363"
    assert vuln.vuln_info["cve_id"] == "CVE-2014-4650"


def test_vuln_query_with_all_bells_and_whistles(cbcsdk_mock):
    """Tests running the query with all values set."""
    def post_validate(url, body, **kwargs):
        crits = body['criteria']
        assert crits['device_type'] == {"value": "WORKLOAD", "operator": "EQUALS"}
        assert crits['highest_risk_score'] == {"value": 10, "operator": "LESS_THAN"}
        assert crits['last_sync_ts'] == {"value": "2020-01-02T03:04:05Z", "operator": "EQUALS"}
        assert crits['name'] == {"value": "test", "operator": "EQUALS"}
        assert crits['os_arch'] == {"value": "x86_64", "operator": "EQUALS"}
        assert crits['os_name'] == {"value": "Red Hat Enterprise Linux Server", "operator": "EQUALS"}
        assert crits['os_type'] == {"value": "RHEL", "operator": "EQUALS"}
        assert crits['os_version'] == {"value": "7.0", "operator": "EQUALS"}
        assert crits['severity'] == {"value": "CRITICAL", "operator": "EQUALS"}
        assert crits['sync_type'] == {"value": "SCHEDULED", "operator": "EQUALS"}
        assert crits['sync_status'] == {"value": "MATCHED", "operator": "EQUALS"}
        assert crits['vm_id'] == {"value": "vm-30", "operator": "EQUALS"}
        assert crits['vuln_count'] == {"value": 30, "operator": "EQUALS"}
        return GET_VULNERABILITY_RESP_MULTIPLE

    cbcsdk_mock.mock_request("POST", "/vulnerability/assessment/api/v1/orgs/test/devices/vulnerabilities/_search",
                             post_validate)
    api = cbcsdk_mock.api
    query = api.select(Vulnerability).set_device_type('WORKLOAD', 'EQUALS') \
                                     .set_highest_risk_score(10, 'LESS_THAN') \
                                     .set_last_sync_ts('2020-01-02T03:04:05Z', 'EQUALS') \
                                     .set_name('test', 'EQUALS') \
                                     .set_os_arch('x86_64', 'EQUALS') \
                                     .set_os_name('Red Hat Enterprise Linux Server', 'EQUALS') \
                                     .set_os_type('RHEL', 'EQUALS') \
                                     .set_os_version('7.0', 'EQUALS') \
                                     .set_severity('CRITICAL', 'EQUALS') \
                                     .set_sync_type('SCHEDULED', 'EQUALS') \
                                     .set_sync_status('MATCHED', 'EQUALS') \
                                     .set_vm_id('vm-30', 'EQUALS') \
                                     .set_vuln_count(30, 'EQUALS') \
                                     .sort_by('device_type')

    results = [result for result in query._perform_query()]
    assert len(results) == 2
    assert query._count() == len(results)
    vuln = results[0]
    assert vuln.os_product_id == "90_5363"
    assert vuln.vuln_info["cve_id"] == "CVE-2014-4650"


def test_vuln_query_with_all_bells_and_whistles_failures(cbcsdk_mock):
    """Testing all set methods"""
    def post_validate(url, body, **kwargs):
        crits = body['criteria']
        assert crits is None
    cbcsdk_mock.mock_request("POST", "/vulnerability/assessment/api/v1/orgs/test/devices/vulnerabilities/_search",
                             post_validate)
    api = cbcsdk_mock.api

    with pytest.raises(ApiError) as ex:
        api.select(Vulnerability).set_device_type('WRONG', 'EQUALS')
    assert ex.value.message == 'Invalid device type'

    with pytest.raises(ApiError) as ex:
        api.select(Vulnerability).set_highest_risk_score('', 'EQUALS')
    assert ex.value.message == 'Invalid highest risk score'

    with pytest.raises(ApiError) as ex:
        api.select(Vulnerability).set_name('', 'EQUALS')
    assert ex.value.message == 'Invalid name'

    with pytest.raises(ApiError) as ex:
        api.select(Vulnerability).set_os_arch('', 'EQUALS')
    assert ex.value.message == 'Invalid os architecture'

    with pytest.raises(ApiError) as ex:
        api.select(Vulnerability).set_os_name('', 'EQUALS')
    assert ex.value.message == 'Invalid os name'

    with pytest.raises(ApiError) as ex:
        api.select(Vulnerability).set_os_type('WRONG', 'EQUALS')
    assert ex.value.message == 'Invalid os type'

    with pytest.raises(ApiError) as ex:
        api.select(Vulnerability).set_os_version('', 'EQUALS')
    assert ex.value.message == 'Invalid os version'

    with pytest.raises(ApiError) as ex:
        api.select(Vulnerability).set_severity('WRONG', 'EQUALS')
    assert ex.value.message == 'Invalid severity'

    with pytest.raises(ApiError) as ex:
        api.select(Vulnerability).set_sync_type('WRONG', 'EQUALS')
    assert ex.value.message == 'Invalid sync type'

    with pytest.raises(ApiError) as ex:
        api.select(Vulnerability).set_sync_status('WRONG', 'EQUALS')
    assert ex.value.message == 'Invalid sync status'

    with pytest.raises(ApiError) as ex:
        api.select(Vulnerability).set_vm_id('', 'EQUALS')
    assert ex.value.message == 'Invalid vm id'

    with pytest.raises(ApiError) as ex:
        api.select(Vulnerability).set_vuln_count('', 'EQUALS')
    assert ex.value.message == 'Invalid vuln count'

    with pytest.raises(ApiError) as ex:
        api.select(Vulnerability).set_last_sync_ts('', 'EQUALS')
    assert ex.value.message == 'Invalid last_sync_ts'

    with pytest.raises(ApiError) as ex:
        api.select(Vulnerability).sort_by('device_type', 'WRONG')
    assert ex.value.message == 'invalid sort direction specified'


def test_get_affected_assets(cbcsdk_mock):
    """Test Get a list of assets affected by a specific vulnerability CVE ID."""
    def post_validate(url, body, **kwargs):
        assert body.get('os_product_id') is not None
        return GET_AFFECTED_ASSETS_SPECIFIC_VULNERABILITY
    cbcsdk_mock.mock_request("POST",
                             "/vulnerability/assessment/api/v1/orgs/test/devices/vulnerabilities/_search",
                             GET_VULNERABILITY_RESP)
    cbcsdk_mock.mock_request("POST",
                             "/vulnerability/assessment/api/v1/orgs/test/vulnerabilities/CVE-2014-4650/devices",
                             post_validate)
    cbcsdk_mock.mock_request("POST", "/appservices/v6/orgs/test/devices/_search", MOCK_WORKLOAD_RESP)

    api = cbcsdk_mock.api
    vulnerability = Vulnerability(api, "CVE-2014-4650")
    results = list(vulnerability.get_affected_assets())
    assert len(results) == 1
    assert type(results[0]) == Device
    assert results[0].id == 98765
    assert results[0].name in vulnerability.affected_assets


def test_get_affected_assets_async(cbcsdk_mock):
    """Test Get a list of assets affected by a specific vulnerability CVE ID."""
    def post_validate(url, body, **kwargs):
        assert body.get('os_product_id') is not None
        return GET_AFFECTED_ASSETS_SPECIFIC_VULNERABILITY
    cbcsdk_mock.mock_request("POST",
                             "/vulnerability/assessment/api/v1/orgs/test/devices/vulnerabilities/_search",
                             GET_VULNERABILITY_RESP)
    cbcsdk_mock.mock_request("POST",
                             "/vulnerability/assessment/api/v1/orgs/test/vcenters/testvcenter/vulnerabilities/CVE-2014-4650/devices",  # noqa: E501
                             post_validate)
    cbcsdk_mock.mock_request("POST", "/appservices/v6/orgs/test/devices/_search", MOCK_WORKLOAD_RESP)

    api = cbcsdk_mock.api
    vulnerability = Vulnerability(api, "CVE-2014-4650")
    query_future = vulnerability.get_affected_assets().set_vcenter("testvcenter").execute_async()
    results = list(query_future.result())

    assert len(results) == 1
    assert type(results[0]) == Device
    assert results[0].id == 98765
    assert results[0].name in vulnerability.affected_assets


def test_device_vulnerability_summary_get(cbcsdk_mock):
    """Test Get an Operating System or Application Vulnerability Summary for a specific device"""
    cbcsdk_mock.mock_request("GET", "/vulnerability/assessment/api/v1/orgs/test/devices/98765/vulnerabilities/summary",
                             GET_DEVICE_VULNERABILITY_SUMMARY_RESP)
    cbcsdk_mock.mock_request("GET", "/appservices/v6/orgs/test/devices/98765", GET_DEVICE_RESP)
    api = cbcsdk_mock.api
    device = api.select(Device, 98765)
    vulnerability = device.get_vulnerability_summary()
    assert vulnerability['severity_counts']['important'] == 7


def test_device_vulnerability_summary_get_category(cbcsdk_mock):
    """Test Get an Operating System or Application Vulnerability Summary for a specific device"""
    cbcsdk_mock.mock_request("GET", "/vulnerability/assessment/api/v1/orgs/test/devices/98765/vulnerabilities/summary",
                             GET_DEVICE_VULNERABILITY_SUMMARY_RESP)
    cbcsdk_mock.mock_request("GET", "/appservices/v6/orgs/test/devices/98765", GET_DEVICE_RESP)
    api = cbcsdk_mock.api
    device = api.select(Device, 98765)
    vulnerability = device.get_vulnerability_summary(category='OS')
    assert vulnerability['severity_counts']['important'] == 7


def test_device_vulnerability_summary_get_category_fail(cbcsdk_mock):
    """Test Get an Operating System or Application Vulnerability Summary for a specific device"""
    cbcsdk_mock.mock_request("GET", "/vulnerability/assessment/api/v1/orgs/test/devices/98765/vulnerabilities/summary",
                             GET_DEVICE_VULNERABILITY_SUMMARY_RESP)
    cbcsdk_mock.mock_request("GET", "/appservices/v6/orgs/test/devices/98765", GET_DEVICE_RESP)
    api = cbcsdk_mock.api
    device = api.select(Device, 98765)
    with pytest.raises(ApiError) as ex:
        device.get_vulnerability_summary(category='WRONG')
    assert ex.value.message == 'Invalid category provided'


def test_device_vulnerability_search(cbcsdk_mock):
    """Test Get an Operating System or Application Vulnerability Summary for a specific vCenter device."""
    cbcsdk_mock.mock_request("GET", "/appservices/v6/orgs/test/devices/98765", GET_DEVICE_RESP_NO_VCENTER)
    cbcsdk_mock.mock_request("POST",
                             "/vulnerability/assessment/api/v1/orgs/test/devices/98765/vulnerabilities/_search",
                             GET_VULNERABILITY_RESP_MULTIPLE)
    api = cbcsdk_mock.api
    device = api.select(Device, 98765)
    query = device.get_vulnerabilties()
    results = [result for result in query._run_async_query(None)]
    assert len(results) == 2
    query._count_valid = False
    assert query._count() == 2


def test_device_vulnerability_summary(cbcsdk_mock):
    """Test Get an Operating System or Application Vulnerability Summary for a specific vCenter device."""
    cbcsdk_mock.mock_request("GET", "/appservices/v6/orgs/test/devices/98765", GET_DEVICE_RESP_NO_VCENTER)
    cbcsdk_mock.mock_request("GET", "/vulnerability/assessment/api/v1/orgs/test/devices/98765/vulnerabilities/summary",
                             GET_DEVICE_VULNERABILITY_SUMMARY_RESP)
    api = cbcsdk_mock.api
    device = api.select(Device, 98765)
    query = device.get_vulnerability_summary()
    assert query['severity_counts']['important'] == 7


def test_device_vulnerability_refresh(cbcsdk_mock):
    """Test Get an Operating System or Application Vulnerability Summary for a specific vCenter device."""
    cbcsdk_mock.mock_request("GET", "/appservices/v6/orgs/test/devices/98765", GET_DEVICE_RESP_NO_VCENTER)
    cbcsdk_mock.mock_request("POST", "/vulnerability/assessment/api/v1/orgs/test/devices/98765/"
                             "device_actions", REFRESH_DEVICE_RESP)
    api = cbcsdk_mock.api
    device = api.select(Device, 98765)
    result = device.vulnerability_refresh()
    assert result['device_id'] == 98765
