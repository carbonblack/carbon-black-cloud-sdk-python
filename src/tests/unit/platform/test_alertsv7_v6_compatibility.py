# *******************************************************
# Copyright (c) VMware, Inc. 2020-2023. All Rights Reserved.
# SPDX-License-Identifier: MIT
# *******************************************************
# *
# * DISCLAIMER. THIS PROGRAM IS PROVIDED TO YOU "AS IS" WITHOUT
# * WARRANTIES OR CONDITIONS OF ANY KIND, WHETHER ORAL OR WRITTEN,
# * EXPRESS OR IMPLIED. THE AUTHOR SPECIFICALLY DISCLAIMS ANY IMPLIED
# * WARRANTIES OR CONDITIONS OF MERCHANTABILITY, SATISFACTORY QUALITY,
# * NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE.

"""Testing functions which generate a v6 compatible out from using v7 APIs."""
import pytest

from cbc_sdk.platform import (
    BaseAlert,
    # CBAnalyticsAlert,
    # WatchlistAlert,
    # DeviceControlAlert,
    # ContainerRuntimeAlert
)
from cbc_sdk.rest_api import CBCloudAPI
from tests.unit.fixtures.platform.mock_alert_v6_v7_compatibility import ALERT_V6_INFO_SDK_1_4_3, GET_ALERT_v7_RESPONSE

from tests.unit.fixtures.CBCSDKMock import CBCSDKMock


@pytest.fixture(scope="function")
def cb():
    """Create CBCloudAPI singleton"""
    return CBCloudAPI(url="https://example.com", org_key="test", token="abcd/1234", ssl_verify=False)


@pytest.fixture(scope="function")
def cbcsdk_mock(monkeypatch, cb):
    """Mocks CBC SDK for unit tests"""
    return CBCSDKMock(monkeypatch, cb)


# ==================================== UNIT TESTS BELOW ====================================

SKIP_FIELDS = {"workflow"}

BASE_FIELDS_V6 = {"group_details", "category", "threat_activity_c2", "threat_indicators"}


CB_ANALYTICS_FIELDS_V6 = {
    "blocked_threat_category",
    "kill_chain_status",
    "not_blocked_threat_category",
    "threat_activity_c2",
    "threat_activity_dlp",
    "threat_activity_phish",
    "threat_cause_vector",
}


DEVICE_CONTROL_FIELDS_V6 = {"threat_cause_vector"}


WATCHLIST_FIELDS_V6 = {"count", "document_guid", "threat_cause_vector"}


ALL_FIELDS_V6 = CB_ANALYTICS_FIELDS_V6 | BASE_FIELDS_V6 | DEVICE_CONTROL_FIELDS_V6 | WATCHLIST_FIELDS_V6


def test_cb_analytic(cbcsdk_mock):
    """
    Test the generation of a v6 to_json output

    compare what is generated by the current SDK with expected from SDK 1.4.3
    """
    called = 0

    def get_alert(*args, **kwargs):
        nonlocal called
        if called == 0:
            called += 1
            return GET_ALERT_v7_RESPONSE

    cbcsdk_mock.mock_request("GET", "/api/alerts/v7/orgs/test/alerts/6f1173f5-f921-8e11-2160-edf42b799333", get_alert)
    api = cbcsdk_mock.api
    alert = api.select(BaseAlert, ALERT_V6_INFO_SDK_1_4_3.get("id"))
    alert_json_compare(ALERT_V6_INFO_SDK_1_4_3, alert.to_json("v6"))


def alert_json_compare(alert_v6, alert_v6_from_v7):
    """Compare the alert_v6 to alert_v6_from_v7."""
    # Objects were not the same - checking one field at a time
    for key in alert_v6:
        check_inner(alert_v6.get(key), alert_v6_from_v7.get(key), key)


def check_common(alert_v6, alert_v6_from_v7, key):
    """Make some generic checks for fields"""
    # fields from base alert that are not in v7. No mapping available
    assert not (
        key in BASE_FIELDS_V6 and key in alert_v6_from_v7
    ), "ERROR: Field does not exist in v7 base alert and should be missing: {}".format(key)

    # fields from cb analytics that are not in v7. No mapping available
    assert not (
        alert_v6.get("type") == "CB_ANALYTICS" and key in CB_ANALYTICS_FIELDS_V6 and key in alert_v6_from_v7
    ), "ERROR: Field does not exist in v7 cb analytics alert and should be missing: {}".format(key)

    # no fields removed in v7 for container runtime alerts
    # no fields removed in v7 for host based firewall alerts
    # fields from device control that are not in v7. No mapping available
    assert not (
        alert_v6.get("type") == "DEVICE_CONTROL" and key in DEVICE_CONTROL_FIELDS_V6 and key in alert_v6_from_v7
    ), "ERROR: Field does not exist in v7 device control alert and should be missing: {}".format(key)

    # fields from watchlist alert that are not in v7. No mapping available
    assert not (
        key in WATCHLIST_FIELDS_V6 and alert_v6.get("type") == "WATCHLIST" and key in alert_v6_from_v7
    ), "ERROR: Field does not exist in v7 watchlist alert and should be missing: {}".format(key)
    if not alert_v6_from_v7.get(key):
        print("{} was not found - {} {}".format(key, alert_v6_from_v7.get(key), alert_v6.get(key)))
    elif not isinstance(alert_v6, dict):
        assert alert_v6 == alert_v6_from_v7, "ERROR: Values does not match {} - v6: {} v7: {}".format(
            key, alert_v6, alert_v6_from_v7
        )


def check_inner(alert_v6, alert_v6_from_v7, key=None):
    """Check inner dictionaries"""
    assert not (
        key in ALL_FIELDS_V6 and key in alert_v6
    ), "ERROR: Field does not exist in v7 and should be missing: {}".format(key)

    if isinstance(alert_v6, dict):
        # check whether the other one is a dict
        assert isinstance(alert_v6_from_v7, dict), "ERROR: Values does not match - {} {}".format(
            alert_v6, alert_v6_from_v7
        )
        for key in alert_v6:
            if isinstance(alert_v6.get(key), dict):
                # check whether the other is a dict too
                assert isinstance(
                    alert_v6_from_v7.get(key), dict
                ), "ERROR: Values does not match for field {} - v6: {} v7: {}".format(
                    key, alert_v6.get(key), alert_v6_from_v7.get(key)
                )
                # recursively check the properties
                check_inner(alert_v6.get(key), alert_v6_from_v7.get(key), key)
            else:
                check_common(alert_v6, alert_v6_from_v7, key)
                if not alert_v6_from_v7.get(key):
                    print("{} was not found - {} {}".format(key, alert_v6_from_v7, alert_v6))
                    continue
                elif key in ALL_FIELDS_V6:
                    continue
                assert key in SKIP_FIELDS or alert_v6.get(key) == alert_v6_from_v7.get(
                    key
                ), "ERROR: Values does not match for field xx {} - v6: {} v7: {}".format(
                    key, alert_v6.get(key), alert_v6_from_v7.get(key)
                )
